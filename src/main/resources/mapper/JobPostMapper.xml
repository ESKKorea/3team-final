<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.javalab.board.repository.JobPostMapper">

    <insert id="insertJobPost" parameterType="com.javalab.board.vo.JobPostVo">
        <selectKey keyProperty="jobPostId" resultType="long" order="BEFORE">
            SELECT JOBPOST_SEQ.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO JOBPOST (
        jobPost_id, title, content, education, experience, position, address, salary, end_date, hit_no, created, comp_id
        ) VALUES (
        #{jobPostId}, #{title}, #{content}, #{education}, #{experience}, #{position}, #{address, jdbcType=VARCHAR}, #{salary, jdbcType=VARCHAR}, #{endDate}, 0, SYSDATE, #{compId}
        )
    </insert>

    <select id="getJobPostById" resultType="com.javalab.board.vo.JobPostVo">
        SELECT jp.*, c.logo_name AS logoName, c.company_name AS companyName  <!-- 회사 로고 이름 추가 -->
        FROM jobPost jp
        LEFT JOIN company c ON jp.comp_id = c.comp_id  <!-- company 테이블과 조인 -->
        WHERE jp.jobPost_id = #{jobPostId}
    </select>

    <select id="getAllJobPosts" resultType="com.javalab.board.vo.JobPostVo">
        SELECT jp.*, c.logo_name AS logoName, c. company_name AS companyName  <!-- 회사 로고 이름 추가 -->
        FROM jobPost jp
        LEFT JOIN company c ON jp.comp_id = c.comp_id  <!-- company 테이블과 조인 -->
        ORDER BY jp.created DESC
    </select>

    <select id="selectJobPostsByCompany" parameterType="String" resultType="com.javalab.board.vo.JobPostVo">
        SELECT jp.*, c.logo_name AS logoName  <!-- 회사 로고 이름 추가 -->
        FROM jobPost jp
        LEFT JOIN company c ON jp.comp_id = c.comp_id  <!-- company 테이블과 조인 -->
        WHERE jp.comp_id = #{compId}
        ORDER BY jp.created DESC
    </select>

    <update id="updatePaymentStatus">
        UPDATE jobPost
        SET payment_status = #{paymentStatus}
        WHERE jobPost_id = #{jobPostId}
    </update>

    <select id="findJobPostById" parameterType="long" resultType="com.javalab.board.vo.JobPostVo">
        SELECT jp.*, c.logo_name AS logoName  <!-- 회사 로고 이름 추가 -->
        FROM jobPost jp
        LEFT JOIN company c ON jp.comp_id = c.comp_id  <!-- company 테이블과 조인 -->
        WHERE jp.jobPost_id = #{jobPostId}
    </select>

    <select id="getScrapList" parameterType="string"
            resultType="com.javalab.board.vo.JobPostVo">
        SELECT j.jobPost_id, j.title, j.created, k.jobSeeker_id, c.logo_name AS logoName  <!-- 회사 로고 이름 추가 -->
        FROM jobSeekerScrap s
        JOIN jobPost j ON s.jobPost_id = j.jobPost_id
        JOIN jobSeeker k ON s.jobSeeker_id = k.jobSeeker_id
        LEFT JOIN company c ON j.comp_id = c.comp_id  <!-- company 테이블과 조인 -->
        WHERE s.jobSeeker_id = #{jobSeekerId}
    </select>

    <select id="getJobPostDetailsById" resultType="com.javalab.board.vo.JobPostVo">
        SELECT jp.title, jp.salary, jp.address, jp.end_date, c.logo_name AS logoName  <!-- 회사 로고 이름 추가 -->
        FROM jobPost jp
        LEFT JOIN company c ON jp.comp_id = c.comp_id  <!-- company 테이블과 조인 -->
        WHERE jp.jobPost_id = #{jobPostId}
    </select>

    <update id="updateJobPost" parameterType="com.javalab.board.vo.JobPostVo">
        UPDATE jobPost
        SET title = #{title, jdbcType=VARCHAR},
        content = #{content, jdbcType=VARCHAR},
        position = #{position, jdbcType=VARCHAR},
        salary = #{salary, jdbcType=VARCHAR},
        experience = #{experience, jdbcType=VARCHAR},
        education = #{education, jdbcType=VARCHAR},
        address = #{address, jdbcType=VARCHAR},
        end_date = #{endDate, jdbcType=DATE},
        homepage = #{homepage, jdbcType=VARCHAR}
        WHERE jobPost_id = #{jobPostId, jdbcType=BIGINT}
    </update>

    <delete id="deleteJobPost">
        DELETE FROM jobPost
        WHERE jobPost_id = #{jobPostId}
    </delete>

    <delete id="deleteScrapsByJobPostId">
        DELETE FROM jobSeekerScrap
        WHERE jobPost_id = #{jobPostId}
    </delete>

    <update id="incrementHitCount" parameterType="long">
        UPDATE jobPost
        SET hit_no = hit_no + 1
        WHERE jobPost_id = #{jobPostId}
    </update>

<!--    <select id="selectTop5PopularJobPosts" resultType="com.javalab.board.vo.JobPostVo">-->
<!--        SELECT jp.*, c.logo_name AS logoName, c.company_name AS companyName  &lt;!&ndash; 회사 로고 이름 추가 &ndash;&gt;-->
<!--        FROM jobPost jp-->
<!--        LEFT JOIN company c ON jp.comp_id = c.comp_id  &lt;!&ndash; company 테이블과 조인 &ndash;&gt;-->
<!--        WHERE jp.payment_status = 'After Payment'-->
<!--        ORDER BY jp.hit_no DESC-->
<!--        FETCH FIRST 5 ROWS ONLY-->
<!--    </select>-->


    <select id="selectTop5PopularJobPosts" resultType="com.javalab.board.vo.JobPostVo">
        SELECT *
        FROM (
        SELECT jp.*, c.logo_name AS logoName, c.company_name AS companyName
        FROM jobPost jp
        LEFT JOIN company c ON jp.comp_id = c.comp_id
        WHERE jp.payment_status = 'After Payment'
        ORDER BY jp.hit_no DESC
        )
        WHERE ROWNUM = 5
    </select>


    <select id="selectAllJobPostsForAdmin" resultType="com.javalab.board.vo.JobPostVo">
        SELECT jp.*, c.logo_name AS logoName, c.company_name AS companyName,  <!-- 회사 로고 이름 추가 -->
        p.comp_id AS compId,
        p.payment_date AS paymentDate,
        p.amount AS amount
        FROM jobPost jp
        LEFT JOIN company c ON jp.comp_id = c.comp_id  <!-- company 테이블과 조인 -->
        LEFT JOIN payment p ON jp.jobPost_id = p.jobPost_id
        ORDER BY jp.created DESC
    </select>

    <select id="selectJobPostsByFilters" parameterType="map" resultType="com.javalab.board.vo.JobPostVo">
        SELECT jp.*, c.logo_name AS logoName  <!-- 회사 로고 이름 추가 -->
        FROM jobPost jp
        LEFT JOIN company c ON jp.comp_id = c.comp_id  <!-- company 테이블과 조인 -->
        WHERE
        (#{address, jdbcType=VARCHAR} IS NULL OR jp.address = #{address, jdbcType=VARCHAR})
        AND (#{education, jdbcType=VARCHAR} IS NULL OR jp.education = #{education, jdbcType=VARCHAR})
        AND (#{experience, jdbcType=VARCHAR} IS NULL OR jp.experience = #{experience, jdbcType=VARCHAR})
        AND jp.payment_status = 'After Payment'
    </select>

    <select id="searchJobPosts" resultType="com.javalab.board.vo.JobPostVo">
        SELECT jp.*, c.logo_name AS logoName  <!-- 회사 로고 이름 추가 -->
        FROM jobPost jp
        LEFT JOIN company c ON jp.comp_id = c.comp_id  <!-- company 테이블과 조인 -->
        WHERE jp.title LIKE '%' || #{keyword} || '%'
    </select>

    <insert id="insertRequiredSkill" parameterType="map">
        <selectKey keyProperty="requiredSkillId" resultType="long" order="BEFORE">
            SELECT REQUIREDSKILL_SEQ.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO requiredSkill (requiredSkill_id, jobPost_id, skill)
        VALUES (#{requiredSkillId}, #{jobPostId}, #{skill})
    </insert>

    <select id="getRequiredSkillsByJobPostId" resultType="string">
        SELECT skill
        FROM requiredSkill
        WHERE jobPost_id = #{jobPostId}
    </select>

    <select id="findAll">
        SELECT * FROM jobPost
    </select>

    <!-- 총 공고 수를 가져오는 쿼리 -->
    <select id="getTotalJobPosts" resultType="int">
        SELECT COUNT(*) FROM jobPost
    </select>
</mapper>
